import json
import asyncio
import logging
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

DATA_FILE = "data.json"

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"admins": [], "events": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def is_admin(user_id: int) -> bool:
    return user_id in load_data().get("admins", [])

def main_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="/add"))
    kb.add(KeyboardButton(text="/list"))
    kb.add(KeyboardButton(text="/help"))
    return kb.as_markup(resize_keyboard=True)

def format_date_ddmmyyyy(date_str_iso: str) -> str:
    try:
        dt = datetime.strptime(date_str_iso, "%Y-%m-%d")
        return dt.strftime("%d.%m.%Y")
    except Exception:
        return date_str_iso

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n–Ø ‚Äî –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.",
        reply_markup=main_keyboard()
    )
    await cmd_help(message)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    text = (
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤–≤–æ–¥)\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(text)

@dp.message(Command("add"))
async def cmd_add(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.")
    await message.answer(
        "üì• –í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "–î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "–í—Ä–µ–º—è (–ß–ß:–ú–ú)\n"
        "–ú–µ—Å—Ç–æ\n"
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    )

@dp.message()
async def handle_multiline_event(message: Message):
    if not is_admin(message.from_user.id):
        return

    lines = message.text.strip().split("\n")
    if len(lines) < 4:
        return

    title, date_str_input, time_str, location = lines[:4]
    comment = "\n".join(lines[4:]) if len(lines) > 4 else ""

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ –î–î.–ú–ú.–ì–ì–ì–ì –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –≤ ISO –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    try:
        dt = datetime.strptime(date_str_input.strip(), "%d.%m.%Y")
        date_str = dt.strftime("%Y-%m-%d")
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    try:
        datetime.strptime(time_str.strip(), "%H:%M")
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú")

    data = load_data()
    data["events"].append({
        "title": title.strip(),
        "date": date_str,
        "time": time_str.strip(),
        "location": location.strip(),
        "comment": comment.strip()
    })
    save_data(data)
    await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

@dp.message(Command("list"))
async def cmd_list(message: Message):
    data = load_data()
    events = data.get("events", [])

    if not events:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.")
        return

    builder = InlineKeyboardBuilder()
    text_lines = []
    for i, e in enumerate(events):
        date_str = format_date_ddmmyyyy(e['date'])
        comment_text = e['comment'] if e['comment'] else "-"
        text_lines.append(
            f"<b>{i+1}.</b> {e['title']}\n"
            f"üóì {date_str} {e['time']}\n"
            f"üìç {e['location']}\n"
            f"üìù {comment_text}\n"
        )
        if is_admin(message.from_user.id):
            builder.button(text=f"–£–¥–∞–ª–∏—Ç—å {i+1}", callback_data=f"confirm_remove_{i}")

    await message.answer(
        "<b>–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:</b>\n\n" + "\n".join(text_lines),
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data and c.data.startswith("confirm_remove_"))
async def process_confirm_remove(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.", show_alert=True)
        return

    index = int(callback.data.split("_")[-1])
    data = load_data()
    events = data.get("events", [])

    if 0 <= index < len(events):
        removed = events.pop(index)
        save_data(data)
        await callback.message.edit_text(
            f"üóë –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ:\n\n<b>{removed['title']}</b>\n–î–∞—Ç–∞: {format_date_ddmmyyyy(removed['date'])} {removed['time']}"
        )
    else:
        await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

async def send_today_schedule():
    data = load_data()
    today_str = datetime.now().strftime("%Y-%m-%d")
    events = [e for e in data["events"] if e["date"] == today_str]

    if not events:
        text = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π."
    else:
        text = "<b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n" + "\n\n".join(
            f"<b>{e['title']}</b>\nüïí {e['time']}\nüìç {e['location']}\nüìù {e['comment'] or '-'}"
            for e in events
        )

    await bot.send_message(chat_id=GROUP_ID, text=text)

async def send_weekly_schedule():
    data = load_data()
    today = datetime.now()
    week_end = today + timedelta(days=7)
    weekly_events = [
        e for e in data.get("events", [])
        if today <= datetime.strptime(e["date"], "%Y-%m-%d") < week_end
    ]

    if not weekly_events:
        text = "–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç üò¥"
    else:
        text = "<b>–°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n" + "\n\n".join(
            f"<b>{e['title']}</b> ‚Äî {format_date_ddmmyyyy(e['date'])} {e['time']}\nüìç {e['location']}\nüìù {e['comment'] or '-'}"
            for e in sorted(weekly_events, key=lambda x: (x["date"], x["time"]))
        )

    await bot.send_message(chat_id=GROUP_ID, text=text)


async def main():
    logging.basicConfig(level=logging.INFO)
    # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —ç—Ç–æ–π –Ω–æ—á—å—é (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞)
    scheduler.add_job(send_weekly_schedule, "date",
                      run_date=datetime.now().replace(hour=1, minute=50, second=0, microsecond=0))
    scheduler.add_job(send_today_schedule, "date",
                      run_date=datetime.now().replace(hour=1, minute=51, second=0, microsecond=0))

    # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏
    scheduler.add_job(send_weekly_schedule, "cron", day_of_week="mon", hour=8, minute=0)
    scheduler.add_job(send_today_schedule, "cron", hour=7, minute=30)

    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
